// Lengths
$HEADER_HEIGHT: 72px;
$CONTENT_WIDTH: 1180px;
$CONTENT_PADDING: 20px;
$VIEWPORT_MARGIN_HORI: 3vw;
$VIEWPORT_MARGIN_VERT: 25px;

// Text
$FONT_SIZE: 16px;
$LINE_HEIGHT: 1.4;
$WEIGHT_NORMAL: 400;
$WEIGHT_BOLD: 700;
$FONT_FAMILY_DEFAULT: 'Noto Sans CJK KR', 'Noto Sans KR', 'Helvetica Neue', Arial, sans-serif;
$FONT_FAMILY_MONOSPACE: 'Noto Sans Mono CJK KR', 'Noto Sans Mono', 'Roboto Mono', monospace;

// Color
$COLOR_OFF_O: .6;
$COLOR_ON_O: 1;
$COLOR_LIGHT_O: .1;
$COLOR_DARK_O: .4;

$COLOR_LIGHT: #faf9f8;
$COLOR_LIGHT_H: #ffffff;
$COLOR_LIGHT_T: rgba(255, 255, 255, .7);

$COLOR_DARK: #000000;
$COLOR_DARK_H: #1b1a19;
$COLOR_DARK_T: rgba(0, 0, 0, .4);

$COLOR_HL: var(--color-hl);

$COLOR_DEF: var(--color-def);
$COLOR_DEF_H: var(--color-def-hl);
$COLOR_DEF_T: var(--color-def-tp);
$COLOR_DEF_O: var(--color-def-op);

$COLOR_INV: var(--color-inv);
$COLOR_INV_H: var(--color-inv-hl);
$COLOR_INV_T: var(--color-inv-tp);
$COLOR_INV_O: var(--color-inv-op);

$COLOR_GRAY: #484644;
$COLOR_GRAY_O: rgba(72, 70, 68, $COLOR_INV_O);

// Transition
$TRANSIT_PROPERTY: .26s ease-in-out;

@function getTransitProperty($props) {
  $tsFullText: '';
  $tsSeparator: '';
  @each $prop in $props {
    $tsFullText: $tsFullText + $tsSeparator + $prop + ' ' + $TRANSIT_PROPERTY;
    $tsSeparator: ', ';
  }
  @return #{$tsFullText};
}

@mixin transit($props...) {
  transition: getTransitProperty($props);
}
@mixin transitImportant($props...) {
  transition: getTransitProperty($props) !important;
}

// General Effects
$EFFECT_PUSH_SCALE: .92;
$EFFECT_PULL_SCALE: 1.3;

@mixin onFocus {
  &:hover, &:target, &:focus {
    @content;
  }
}
@mixin notOnFocus {
  &:not(:hover):not(:target):not(:focus) {
    @content;
  }
}

// Component Effects
$RADBOX_RADIUS: 3.5px;
$RADBOX_SHADOW: 0 0 .5px 0 #{$COLOR_GRAY_O}, 0 .5px 2.4px 0 #{$COLOR_GRAY_O}, 0 .15px 2px 0 #{$COLOR_GRAY_O};
$RADBOX_SHADOW_H: 0 0 1px 0 #{$COLOR_GRAY_O}, 0 .5px 3.2px 0 #{$COLOR_GRAY_O}, 0 .15px 4px 0 #{$COLOR_GRAY_O};
@mixin radbox($addiTransit...) {
  box-shadow: $RADBOX_SHADOW;
  border-radius: $RADBOX_RADIUS;
  background-color: $COLOR_INV_H;

  @if length($addiTransit) == 0 {
    @include transit(background-color);
  }
  @else {
    transition: #{getTransitProperty((background-color))}, #{getTransitProperty($addiTransit)};
  }
}
@mixin radboxButton($addiTransit...) {
  cursor: pointer;

  @if length($addiTransit) == 0 {
    @include transit(box-shadow, transform, background-color);
  }
  @else {
    transition: #{getTransitProperty((box-shadow, transform, background-color))}, #{getTransitProperty($addiTransit)};
  }

  @include radbox;

  &:hover, &:active, &:focus {
    box-shadow: $RADBOX_SHADOW_H;
    transform: scale(#{$EFFECT_PUSH_SCALE});
  }
}

// Spinner
$SPINNER_SIZE: 48px;

@import "SpinThatShit/src/loaders";
@mixin spinner {
  @include loader06(
    $size: $SPINNER_SIZE,
    $align: middle,
    $color: $COLOR_GRAY,
    $duration: 1s,
    $border-size: 4px
  );
}

// Print View
@mixin noPrint {
  @media print {
    display: none !important;
  }
}

// Compact View
$CV_DIVISOR: 1.4;

@function comp($prop) {
  @return $prop / $CV_DIVISOR;
}

@mixin onCompactView {
  @media screen and (max-width: #{$CONTENT_WIDTH + $CONTENT_PADDING - 1px}) {
    @content;
  }
}
@mixin onSemiCompactView {
  @media screen and (max-width: 799px) {
    @content;
  }
}
@mixin onSuperCompactView {
  @media screen and (max-width: 419px) {
    @content;
  }
}
@mixin onUltraCompactView {
  @media screen and (max-width: 329px) {
    @content;
  }
}

// Highlight.js
$HLJS_LIGHT: (
  'red': #E53935,
  'orange': #F76D47,
  'yellow': #FFB62C,
  'green': #91B859,
  'cyan': #39ADB5,
  'blue': #6182B8,
  'paleblue': #8796B0,
  'purple': #7C4DFF,
  'brown': #C17E70,
  'gray': #686868
);

$HLJS_DARK: (
  "red": #ff5370,
  "orange": #f78c6c,
  "yellow": #ffcb6b,
  "green": #c3e88d,
  "cyan": #89ddff,
  "blue": #82aaff,
  "paleblue": #b2ccd6,
  "purple": #c792ea,
  "brown": #c17e70,
  "gray": #797979
);

@mixin applyHighlightJS($Palette) {
  .hljs- {
    &keyword, &type {
      color: map-get($Palette, "purple");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &built_in, &attribute, &variable, &formula {
      color: $COLOR_DEF;
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &literal, &number, &selector-tag, &template-tag {
      color: map-get($Palette, "orange");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &regexp, &meta, &meta-keyword {
      color: map-get($Palette, "cyan");
      font-weight: $WEIGHT_NORMAL;
      font-style: italic;
    }
    &string, &meta-string, &selector-attr, &addition {
      color: map-get($Palette, "green");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &subst, &builtin-name {
      color: map-get($Palette, "brown");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &symbol, &class {
      color: map-get($Palette, "yellow");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &title, &function, &template-variable {
      color: map-get($Palette, "blue");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &params, &name, &strong, &deletion {
      color: map-get($Palette, "red");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &comment {
      color: map-get($Palette, "gray");
      font-weight: $WEIGHT_NORMAL;
      font-style: italic;
    }
    &doctag {
      color: map-get($Palette, "orange");
      font-weight: $WEIGHT_NORMAL;
      font-style: italic;
    }
    &section {
      color: map-get($Palette, "yellow");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &tag, &bullet, &code {
      color: map-get($Palette, "cyan");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &attr {
      color: map-get($Palette, "paleblue");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
    }
    &emphasis {
      color: map-get($Palette, "red");
      font-weight: $WEIGHT_NORMAL;
      font-style: italic;
    }
    &link {
      color: map-get($Palette, "orange");
      font-weight: $WEIGHT_NORMAL;
      font-style: normal;
      text-decoration: underline;
    }
    &quote {
      color: $COLOR_DEF;
      font-weight: $WEIGHT_NORMAL;
      font-style: italic;
    }
    &selector-id, &selector-pseudo {
      color: map-get($Palette, "purple");
      font-weight: $WEIGHT_NORMAL;
      font-style: italic;
    }
    &selector-class {
      color: map-get($Palette, "yellow");
      font-weight: $WEIGHT_NORMAL;
      font-style: italic;
    }
  }
}

// Others
@function strip($data) {
  @if type-of($data) == 'number' and not unitless($data) {
    @return $data / ($data * 0 + 1);
  }
  @return $data;
}
